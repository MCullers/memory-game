{"version":3,"sources":["Components/header.js","Components/game.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","score","topScore","Component","Game","state","data","Data","setState","index","console","log","newData","gameOver","clicked","i","length","sort","Math","random","updateScore","_this2","map","item","src","image","key","alt","height","width","onClick","handleClick","App","finished","newScore","_this","Components_header","Components_game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y5DAuBeA,gMAjBX,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,6BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACfH,EAAAC,EAAAC,cAAA,MAAIC,WAAS,GAAb,eACAH,EAAAC,EAAAC,cAAA,MAAIC,WAAS,GAAb,4BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,SAAhB,UAAgCC,KAAKC,MAAMC,MAA3C,KACAN,EAAAC,EAAAC,cAAA,MAAIC,UAAY,SAAhB,cAAoCC,KAAKC,MAAME,oBAXpCC,qBCkDNC,oNA9CbC,MAAQ,CACNC,KAAMC,EACNN,MAAO,EACPC,SAAU,sFAGVH,KAAKS,SAAS,CAAEF,KAAKC,wCAGXE,GACVC,QAAQC,IAAIF,GACZ,IAAIG,EAAQb,KAAKM,MAAMC,KACnBO,GAAS,EAOb,GANGD,EAAQH,GAAOK,UAChBD,GAAS,EACTH,QAAQC,IAAI,wBAEdC,EAAQH,GAAOK,SAAQ,EAEpBD,EAED,IAAI,IAAIE,EAAE,EAAEA,EAAEH,EAAQI,OAAOD,IAC3BH,EAAQG,GAAGD,SAAQ,EAGvBf,KAAKS,SAAS,CAAEF,KAAKM,EAAQK,KAAK,iBAAM,GAAMC,KAAKC,aACnDpB,KAAKC,MAAMoB,YAAYP,oCAGhB,IAAAQ,EAAAtB,KACP,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACdC,KAAKM,MAAMC,KAAKgB,IAAI,SAACC,EAAMd,GAAP,OACjBd,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBACfH,EAAAC,EAAAC,cAAA,OAAK2B,IAAKD,EAAKE,MAAOC,IAAKjB,EAAOX,UAAU,eAAe6B,IAAI,UAAUC,OAAO,MAAMC,MAAM,MAAMC,QAAS,kBAAMT,EAAKU,YAAYtB,WAL5I,aAjCaN,cC+BJ6B,6MA9Bb3B,MAAQ,CACNJ,MAAM,EACNC,SAAS,KAEXkB,YAAe,SAAAa,GAEb,GADAvB,QAAQC,IAAI,cAAcsB,GACvBA,EAAS,CACX,IAAIC,EAAWC,EAAK9B,MAAMH,SACvBiC,EAAK9B,MAAMJ,MAAMiC,IAClBA,EAASC,EAAK9B,MAAMJ,OAEtBkC,EAAK3B,SAAS,CAACN,SAASgC,IACxBC,EAAK3B,SAAS,CAACP,MAAM,QAElB,CACH,IAAIiC,EAAWC,EAAK9B,MAAMJ,MAAQ,EAClCkC,EAAK3B,SAAS,CAACP,MAAMiC,8EAKtB,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACuC,EAAD,CAAQnC,MAASF,KAAKM,MAAMJ,MAAOC,SAAUH,KAAKM,MAAMH,WACxDP,EAAAC,EAAAC,cAACwC,EAAD,CAAMjB,YAAerB,KAAKqB,sBAzBdjB,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a5c7d5e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./header.css\";\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (\r\n     \r\n    <div className = \"jumbotron jumbotron-fluid\">\r\n      <div className = \"container\">\r\n        <h1 className>CLICKY GAME</h1>\r\n        <h2 className>Click an Image to begin!</h2>\r\n        <div className = \"row\">\r\n          <h3 className = \"col-6\">Score: {this.props.score} </h3>\r\n          <h3 className = \"col-6\">Top Score: {this.props.topScore}</h3>\r\n        </div>\r\n      </div>\r\n   </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Header;","\r\nimport React, { Component } from \"react\";\r\nimport Data from \"../friends.json\";\r\nimport \"./game.css\";\r\n\r\nclass Game extends Component {\r\n\r\n  state = {\r\n    data: Data,\r\n    score: 0,\r\n    topScore: 0,\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ data:Data });\r\n  }\r\n\r\n  handleClick(index){\r\n    console.log(index);\r\n    let newData=this.state.data;\r\n    let gameOver=false;\r\n    if(newData[index].clicked){\r\n      gameOver=true;\r\n      console.log(\"*****Double clicked\");\r\n    }\r\n    newData[index].clicked=true;\r\n \r\n    if(gameOver){\r\n\r\n      for(var i=0;i<newData.length;i++){\r\n        newData[i].clicked=false;\r\n      }\r\n    }\r\n    this.setState({ data:newData.sort(()=>  0.5 - Math.random()) });\r\n    this.props.updateScore(gameOver);\r\n  }\r\n\r\n  render() {  \r\n    return (\r\n      <div className = \"row\">\r\n        {this.state.data.map((item, index) =>\r\n            <div className = \"col-3\">\r\n            <div className = \"card\">\r\n              <div className = \"img-container\">\r\n                <img src={item.image} key={index} className=\"im-thumbnail\" alt=\"friends\" height=\"200\" width=\"200\" onClick={() => this.handleClick(index) } />\r\n              </div>\r\n            </div>\r\n            </div>)\r\n        }cd \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./Components/header\";\nimport Game from \"./Components/game\";\n\nclass App extends Component {\n  state = {\n    score:0,\n    topScore:0\n  }\n  updateScore = (finished => {\n    console.log(\"updateScore\",finished)\n    if(finished){\n     let newScore = this.state.topScore;\n     if(this.state.score>newScore){\n       newScore=this.state.score;\n     }\n     this.setState({topScore:newScore});\n     this.setState({score:0});\n    }\n    else{\n     let newScore = this.state.score + 1;\n     this.setState({score:newScore});\n    }\n  })\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Header score = {this.state.score} topScore={this.state.topScore}></Header>\n      <Game updateScore = {this.updateScore}></Game>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}